"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8926],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||s;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,r[1]=o;for(var u=2;u<s;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},68476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var i=n(25773),a=(n(27378),n(35318));const s={sidebar_position:4.1},r="GitHub Build Status",o={unversionedId:"getting-started/samples/github-build-status",id:"getting-started/samples/github-build-status",title:"GitHub Build Status",description:"In this sample, we will query the GitHub API to get the status of the latest build of a repository. The status will be used to update the status light.",source:"@site/docs/getting-started/samples/github-build-status.mdx",sourceDirName:"getting-started/samples",slug:"/getting-started/samples/github-build-status",permalink:"/devicescript/getting-started/samples/github-build-status",draft:!1,tags:[],version:"current",sidebarPosition:4.1,frontMatter:{sidebar_position:4.1},sidebar:"tutorialSidebar",previous:{title:"Thermostat",permalink:"/devicescript/getting-started/samples/thermostat"},next:{title:"Homebridge + Humidity Sensor",permalink:"/devicescript/getting-started/samples/homebridge-humidity"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Getting the build status",id:"getting-the-build-status",level:2},{value:"Settings and secrets",id:"settings-and-secrets",level:2},{value:"Using <code>fetch</code>",id:"using-fetch",level:2},{value:"Parsing the response",id:"parsing-the-response",level:2},{value:"Updating the status light",id:"updating-the-status-light",level:2},{value:"Putting it all together",id:"putting-it-all-together",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"github-build-status"},"GitHub Build Status"),(0,a.kt)("p",null,"In this sample, we will query the GitHub API to get the status of the latest build of a repository. The status will be used to update the ",(0,a.kt)("a",{parentName:"p",href:"/developer/status-light"},"status light"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/devices"},"Device")," wih WiFi connectivity (ESP32 only currently)"),(0,a.kt)("li",{parentName:"ul"},"GitHub account and repository")),(0,a.kt)("h2",{id:"getting-the-build-status"},"Getting the build status"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28"},"GitHub commit API")," allows to query the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#get-the-combined-status-for-a-specific-reference"},"combined status of a reference"),".\nWe can use this API to get the status of a branch in the repository."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -L \\\n  -H "Accept: application/vnd.github+json" \\\n  -H "Authorization: Bearer <TOKEN>"\\\n  -H "X-GitHub-Api-Version: 2022-11-28" \\\n  https://api.github.com/repos/OWNER/REPO/commits/REF/status\n')),(0,a.kt)("h2",{id:"settings-and-secrets"},"Settings and secrets"),(0,a.kt)("p",null,"To make the request to GitHub, you need a few configuration strings and one secret. Instead of storing those in source code,\nwe use the builtin ",(0,a.kt)("a",{parentName:"p",href:"/developer/settings"},"settings"),"."),(0,a.kt)("p",null,"Public configuration settings are stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"./env.defaults")," file. This file is part of the source code and can be committed to a repository."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="./env.defaults"',title:'"./env.defaults"'},"GITHUB_OWNER=microsoft\nGITHUB_REPO=devicescript\n# defaults to main\n# GITHUB_REF=master\n")),(0,a.kt)("p",null,"For private repositories, you will need a token to access the API.\nSecrets are stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"./env.local")," file. This file is not part of the source code and ",(0,a.kt)("strong",{parentName:"p"},"should not be committed to a repository"),".\nThe GitHub token needs ",(0,a.kt)("inlineCode",{parentName:"p"},"repo:status")," scope (and no more). You can create a token in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"GitHub settings"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="./env.local"',title:'"./env.local"'},"GITHUB_TOKEN=...\n")),(0,a.kt)("p",null,"In the code, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"readSettings")," function to read the settings and secrets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/index.ts"',title:'"./src/index.ts"'},'import { readSetting } from "@devicescript/settings"\n\n// read configuration from ./env.defaults\nconst owner = await readSetting("GITHUB_OWNER")\nconst repo = await readSetting("GITHUB_REPO")\n// read ref or default to \'main\'\nconst ref = await readSetting("GITHUB_REF", "main")\n// read secret from ./env.local\nconst token = await readSetting("GITHUB_TOKEN", "")\n\nconsole.log({ owner, repo, ref })\n')),(0,a.kt)("h2",{id:"using-fetch"},"Using ",(0,a.kt)("inlineCode",{parentName:"h2"},"fetch")),(0,a.kt)("p",null,"We combine the settings and secrets to create the URL to query the GitHub API. We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," function from the\n",(0,a.kt)("a",{parentName:"p",href:"/developer/net"},"@devicescript/net")," package to make the request. Fetch is similar to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"},"Fetch API"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { fetch } from "@devicescript/net"\n\n...\n\nconst res = await fetch(\n    `https://api.github.com/repos/${owner}/${repo}/commits/${ref}/status`,\n    {\n        headers: {\n            Accept: "application/vnd.github+json",\n            Authorization: token ? `Bearer ${token}` : undefined,\n            "X-GitHub-Api-Version": "2022-11-28",\n        },\n    }\n)\n\nconsole.log({ res })\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Microcontrollers are memory constrained and you should always try to minimize the amount of data you send and receive.\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/graphql"},"GraphQL API")," from GitHub would allow you to create more targetted queries with smaller result payloads.")),(0,a.kt)("h2",{id:"parsing-the-response"},"Parsing the response"),(0,a.kt)("p",null,"Handle the ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch")," response you like any other response. In this case, we parse the JSON response and log the status."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'if (res.status === 200) {\n    const json = await res.json()\n    const state: "failure" | "pending" | "success" = json.state\n    console.log({ json, state })\n}\n')),(0,a.kt)("h2",{id:"updating-the-status-light"},"Updating the status light"),(0,a.kt)("p",null,"Based on the last state, we'll create some LED animation on the status light:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"failure"),": blinking fast red (2x per second)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pending"),": blinking slow orange (1x per second)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": solid green")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { setStatusLight } from "@devicescript/runtime"\n\nlet state: "failure" | "pending" | "success" = ...\nlet blinki = 0\n\nsetInterval(async () => {\n    blinki++;\n    let c = 0x000000\n    if (state === "failure")\n        c = blinki % 2 === 0 ? 0x100000 : 0x000000 // blink fast red\n    else if (state === "pending")\n        c = (blinki >> 1) % 2 === 0 ? 0x100500 : 0x000000 // blink slow orange\n    else if (state === "success") c = 0x000a00 // solid green\n    else c = 0x000000 // dark if any error\n    await setStatusLight(c)\n}, 500)\n')),(0,a.kt)("h2",{id:"putting-it-all-together"},"Putting it all together"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { readSetting } from "@devicescript/settings"\nimport { fetch } from "@devicescript/net"\nimport { schedule, setStatusLight } from "@devicescript/runtime"\n\n// read configuration from ./env.defaults\nconst owner = await readSetting("GITHUB_OWNER")\nconst repo = await readSetting("GITHUB_REPO")\n// read ref or default to \'main\'\nconst ref = await readSetting("GITHUB_REF", "main")\n// read secret from ./env.local\nconst token = await readSetting("GITHUB_TOKEN", "")\n\nif (!owner || !repo) throw new Error("missing configuration")\n\n// track state of last fetch\nlet state: "failure" | "pending" | "success" | "error" | "" = ""\nlet blinki = 0\n\n// update status light\nsetInterval(async () => {\n    blinki++\n    let c = 0x000000\n    if (state === "failure")\n        c = blinki % 2 === 0 ? 0x100000 : 0x000000 // blink fast red\n    else if (state === "pending")\n        c = (blinki >> 1) % 2 === 0 ? 0x100500 : 0x000000 // blink slow orange\n    else if (state === "success") c = 0x000a00 // solid green\n    else c = 0x000000 // dark if any error\n    await setStatusLight(c)\n}, 500)\n\nschedule(\n    async () => {\n        const res = await fetch(\n            `https://api.github.com/repos/${owner}/${repo}/commits/${ref}/status`,\n            {\n                headers: {\n                    Accept: "application/vnd.github+json",\n                    Authorization: token ? `Bearer ${token}` : undefined,\n                    "X-GitHub-Api-Version": "2022-11-28",\n                },\n            }\n        )\n        if (res.status === 200) {\n            const json = await res.json()\n            state = json.state\n            console.log({ json, state })\n        } else state = "error"\n    },\n    { timeout: 1000, interval: 60000 }\n)\n')))}d.isMDXComponent=!0}}]);